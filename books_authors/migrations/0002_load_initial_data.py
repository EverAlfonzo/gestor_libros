# Generated by Django 5.2.5 on 2025-08-19 01:57
import json
import os
from django.db import migrations


def load_data(apps, schema_editor):
    Author = apps.get_model("books_authors", "Author")
    Book = apps.get_model("books_authors", "Book")

    base_dir = os.path.dirname(os.path.dirname(__file__))  # books_authors/
    fixtures_dir = os.path.join(base_dir, "fixtures")

    # ---- AUTORES ----
    authors_path = os.path.join(fixtures_dir, "authors.json")
    with open(authors_path, "r", encoding="utf-8") as f:
        authors_data = json.load(f)

    for entry in authors_data:
        Author.objects.update_or_create(
            id=entry["id"],
            defaults={
                "first_name": entry["first_name"],
                "last_name": entry["last_name"],
                "birth_date": entry.get("birth_date"),
                "bio": entry.get("bio", ""),
            },
        )

    # ---- LIBROS ----
    books_path = os.path.join(fixtures_dir, "books.json")
    with open(books_path, "r", encoding="utf-8") as f:
        books_data = json.load(f)

    for entry in books_data:
        authors_ids = entry.pop("authors", [])
        book, _ = Book.objects.update_or_create(
            id=entry["id"],
            defaults=entry,
        )
        if authors_ids:
            book.authors.set(Author.objects.filter(id__in=authors_ids))


def unload_data(apps, schema_editor):
    Author = apps.get_model("books_authors", "Author")
    Book = apps.get_model("books_authors", "Book")

    # eliminamos solo los registros que vienen de los fixtures
    Book.objects.filter(id__in=[1, 2, 3, 4]).delete()
    Author.objects.filter(id__in=[1, 2, 3, 4]).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("books_authors", "0001_initial"),  # depende de tu migraci√≥n inicial
    ]

    operations = [
        migrations.RunPython(load_data, reverse_code=unload_data),
    ]
